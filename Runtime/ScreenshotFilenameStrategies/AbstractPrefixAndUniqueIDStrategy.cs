// Copyright (c) 2023 Koji Hasegawa.
// This software is released under the MIT License.

using System.Runtime.CompilerServices;
#if UNITY_INCLUDE_TESTS
using NUnit.Framework;
#endif

namespace TestHelper.Monkey.ScreenshotFilenameStrategies
{
    /// <summary>
    /// An abstract class for screenshot filename strategies. This class generates a file path from a directory path
    /// and a file name prefix and an unique identifier.
    /// </summary>
    public abstract class AbstractPrefixAndUniqueIDStrategy : IScreenshotFilenameStrategy
    {
        private readonly string _filenamePrefix;
        private readonly string _callerMemberName;
        
        /// <summary>
        /// Create a file path for the specified unique identifier. File name will be
        /// <c>$"{filenamePrefix}_{uniqueID}.png"</c>
        /// </summary>
        /// <param name="filenamePrefix">File name prefix for screenshot images</param>
        /// <param name="callerMemberName">Caller member name that is generated by
        /// <c cref="CallerMemberNameAttribute">CallerMemberNameAttribute</c> at anywhere</param>
        protected AbstractPrefixAndUniqueIDStrategy(string filenamePrefix, string callerMemberName)
        {
            _filenamePrefix = filenamePrefix;
            _callerMemberName = callerMemberName;
        }


        /// <inheritdoc />
        public virtual string GetFilename()
        {
            return $"{GetFilenamePrefix()}_{GetUniqueID()}.png";
        }


        /// <summary>
        /// Returns a file name prefix. File names will be <c>"{filenamePrefix}_{uniqueID}.png"</c>.
        /// If no file name or empty file name specified, a file name returned from
        /// <c cref="GetDefaultFilenamePrefix">GetDefaultFilenamePrefix</c> will be used instead
        /// </summary>
        /// <returns>A file name prefix</returns>
        protected virtual string GetFilenamePrefix()
        {
            return string.IsNullOrEmpty(_filenamePrefix)
                ? GetDefaultFilenamePrefix(_callerMemberName)
                : _filenamePrefix;
        }


        /// <summary>
        /// Returns an unique identifier for screenshot images. For example, unique identifier might be a global/local
        /// counter or epoch time or frame count.
        /// </summary>
        /// <returns>An unique identifier string</returns>
        protected abstract string GetUniqueID();


#if UNITY_INCLUDE_TESTS
        /// <summary>
        /// Default filename prefix for screenshot images that using current test names
        /// <remarks>It become same as the file name created under ActualImages of the Graphics Tests Framework package
        /// if <c>UNITY_INCLUDE_TESTS</c> is defined</remarks>
        /// </summary>
        /// <returns>File name prefix that is unique to test cases</returns>
        public static string GetDefaultFilenamePrefixOnTest()
        {
            return TestContext.CurrentTestExecutionContext.CurrentTest.Name
                .Replace('(', '_')
                .Replace(')', '_')
                .Replace(',', '-');
        }
#endif

        /// <summary>
        /// Default filename prefix for screenshot images
        /// </summary>
        /// <param name="callerMemberName">Caller member name generated by <c cref="CallerMemberNameAttribute">
        /// CallerMemberNameAttribute</c> at anywhere. It must not be an empty or <c>null</c></param>
        public static string GetDefaultFilenamePrefix(string callerMemberName) =>
#if UNITY_INCLUDE_TESTS
            GetDefaultFilenamePrefixOnTest();
#else
            callerMemberName;
#endif
    }
}
