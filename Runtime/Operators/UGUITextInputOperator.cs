// Copyright (c) 2023-2025 Koji Hasegawa.
// This software is released under the MIT License.

using System;
using System.Threading;
using Cysharp.Threading.Tasks;
using TestHelper.Monkey.Annotations;
using TestHelper.Monkey.Extensions;
using TestHelper.Monkey.Operators.Utils;
using TestHelper.Monkey.Random;
using TestHelper.Random;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;
#if ENABLE_TMP
using TMPro;
#endif

#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously

namespace TestHelper.Monkey.Operators
{
    /// <summary>
    /// Text input operator for Unity UI (uGUI) <c>InputField</c> component.
    /// </summary>
    public class UGUITextInputOperator : ITextInputOperator
    {
        private readonly Func<GameObject, RandomStringParameters> _randomStringParams;
        private readonly IRandomString _randomString;

        private readonly ScreenshotOptions _screenshotOptions;
        private readonly ILogger _logger;

        /// <summary>
        /// Input random text that is randomly generated by <paramref name="randomStringParams"/>
        /// </summary>
        /// <param name="randomStringParams">Random string generation parameters</param>
        /// <param name="randomString">Random string generator</param>
        /// <param name="screenshotOptions">Take screenshot options set if you need</param>
        /// <param name="logger">Logger, if omitted, use Debug.unityLogger (output to console)</param>
        public UGUITextInputOperator(
            Func<GameObject, RandomStringParameters> randomStringParams = null, IRandomString randomString = null,
            ScreenshotOptions screenshotOptions = null, ILogger logger = null)
        {
            _randomStringParams = randomStringParams ?? (_ => RandomStringParameters.Default);
            _randomString = randomString ?? new RandomStringImpl(new RandomWrapper());
            _screenshotOptions = screenshotOptions;
            _logger = logger ?? Debug.unityLogger;
        }

        /// <inheritdoc />
        public bool CanOperate(Component component)
        {
#if ENABLE_TMP
            return component is InputField || component is TMP_InputField;
#else
            return component is InputField;
#endif
        }

        /// <inheritdoc />
        public async UniTask OperateAsync(Component component, RaycastResult _,
            ScreenshotOptions screenshotOptions = null, ILogger logger = null,
            CancellationToken cancellationToken = default)
        {
            if (!CanOperate(component))
            {
                throw new ArgumentException("Component must be of type InputField or TMP_InputField.");
            }

            Func<GameObject, RandomStringParameters> randomStringParams;
            if (component.gameObject.TryGetEnabledComponent<InputFieldAnnotation>(out var annotation))
            {
                // Overwrite rule if annotation is attached.
                randomStringParams = _ => new RandomStringParameters(
                    (int)annotation.minimumLength,
                    (int)annotation.maximumLength,
                    annotation.charactersKind);
            }
            else
            {
                randomStringParams = _randomStringParams;
            }

            var text = _randomString.Next(randomStringParams(component.gameObject));
            await OperateAsync(component, text, screenshotOptions, logger, cancellationToken);
        }

        /// <inheritdoc />
        public async UniTask OperateAsync(Component component, string text,
            ScreenshotOptions screenshotOptions = null, ILogger logger = null,
            CancellationToken cancellationToken = default)
        {
            if (!CanOperate(component))
            {
                throw new ArgumentException("Component must be of type InputField or TMP_InputField.");
            }

            // Output log before the operation, after the shown effects
            var operationLogger = new OperationLogger(component, this, logger ?? _logger,
                screenshotOptions ?? _screenshotOptions);
            operationLogger.Properties.Add("text", $"\"{text}\"");
            await operationLogger.Log();

            // Selected before operation
            EventSystem.current.SetSelectedGameObject(component.gameObject);

            // Input text
            if (component is InputField inputField)
            {
                inputField.text = text;
            }
#if ENABLE_TMP
            if (component is TMP_InputField tmpInputField)
            {
                tmpInputField.text = text;
            }
#endif
        }
    }
}
