// Copyright (c) 2023-2024 Koji Hasegawa.
// This software is released under the MIT License.

using System;
using System.Threading;
using Cysharp.Threading.Tasks;
using TestHelper.Monkey.Annotations;
using TestHelper.Monkey.Random;
using TestHelper.Random;
using UnityEngine;
using UnityEngine.UI;

#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously

namespace TestHelper.Monkey.Operators
{
    /// <summary>
    /// Text input operator for Unity UI (uGUI) <c>InputField</c> component.
    /// </summary>
    public class UGUITextInputOperator : ITextInputOperator
    {
        private readonly Func<GameObject, RandomStringParameters> _randomStringParams;
        private readonly IRandomString _randomString;

        /// <summary>
        /// Input random text that is randomly generated by <paramref name="randomStringParams"/>
        /// </summary>
        /// <param name="randomStringParams">Random string generation parameters</param>
        /// <param name="randomString">Random string generator</param>
        public UGUITextInputOperator(
            Func<GameObject, RandomStringParameters> randomStringParams = null,
            IRandomString randomString = null)
        {
            _randomStringParams = randomStringParams ?? (_ => RandomStringParameters.Default);
            _randomString = randomString ?? new RandomStringImpl(new RandomWrapper());
        }

        /// <inheritdoc />
        public OperatorType Type => OperatorType.TextInput;

        /// <inheritdoc />
        public bool CanOperate(Component component)
        {
            return component is InputField;
        }

        /// <inheritdoc />
        public async UniTask OperateAsync(Component component, CancellationToken cancellationToken = default)
        {
            if (!(component is InputField inputField))
            {
                throw new ArgumentException("Component must be InputField class.");
            }

            Func<GameObject, RandomStringParameters> randomStringParams;
            var annotation = component.gameObject.GetComponent<InputFieldAnnotation>();
            if (annotation != null)
            {
                // Overwrite rule if annotation is attached.
                randomStringParams = _ => new RandomStringParameters(
                    (int)annotation.minimumLength,
                    (int)annotation.maximumLength,
                    annotation.charactersKind);
            }
            else
            {
                randomStringParams = _randomStringParams;
            }

            inputField.text = _randomString.Next(randomStringParams(component.gameObject));
        }

        /// <inheritdoc />
        public async UniTask OperateAsync(Component component, string text,
            CancellationToken cancellationToken = default)
        {
            if (!(component is InputField inputField))
            {
                throw new ArgumentException("Component must be InputField class.");
            }

            inputField.text = text;
        }
    }
}
